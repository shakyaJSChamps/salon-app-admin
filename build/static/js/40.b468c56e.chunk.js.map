{"version":3,"file":"static/js/40.b468c56e.chunk.js","mappings":"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","sources":["constants/public-endpoint.js","utils/notify.js","service/http.js","constants/index.js","Component/Loader.jsx","Component/Login.js","api/account.api.js","constants/endpoints.js"],"sourcesContent":["export const PUBLIC_URLS = [\"login\"];","import { toast } from 'react-toastify';\r\nconst notify = (message, type ) => toast(message, {type})\r\n\r\nexport default class Notifier {\r\n    static success(message){\r\n        notify(message, 'success')\r\n    }\r\n    static info(message){\r\n        notify(message, 'info')\r\n    }\r\n    static warn(message){\r\n        notify(message, 'warn')\r\n    }\r\n    static error(message){\r\n        notify(message, 'error')\r\n    }\r\n}\r\n","import axios from 'axios';\r\nimport session from \"./session\";\r\nimport {PUBLIC_URLS} from '../constants/public-endpoint';\r\nimport Notify from '../utils/notify';\r\n\r\n//TODO: handle public endpoints, multiple-part request, json request\r\n\r\n/*Setting up interceptors with axios*/\r\naxios.interceptors.request.use(function (config) {\r\n   \r\n    config.headers = {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n    }\r\n\r\n    if(isRequireToken(config.url)){\r\n        config.headers[\"Authorization\"]= `${session.get('token')}`; \r\n       \r\n    } \r\n    return config;\r\n\r\n\r\n}, function (error) {\r\n    return Promise.reject(error);\r\n})\r\n\r\n// Add a response interceptor\r\naxios.interceptors.response.use(function (response) {   \r\n    // Do something with response data \r\n    // 200 OR 20*\r\n    // SUCESS: if request by PUT/POST/DELETE\r\n    // SUCESS: and GET request : no notification\r\n    // ERROR: always\r\n\r\n    return response;\r\n\r\n}, function (error) {\r\n    if (!error.response && error.message === 'Network Error') {\r\n        return Promise.reject(\"Couldn't connect to server. Please try again later.\");\r\n    }else if(error.response && error.response.data){\r\n        return Promise.reject(error.response.data);\r\n    }else{\r\n        return Promise.reject(\"Server Connection Failed\");\r\n    }\r\n});\r\n\r\n\r\nexport default class HTTP {\r\n    static Request(method, url, data = null) {\r\n        \r\n        return new Promise((resolve, reject) => {\r\n            const request = {\r\n                method,\r\n                url,\r\n                [method.toUpperCase() === 'GET' ? \"params\" : \"data\"]: data,\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n\r\n                \r\n            };\r\n            axios(request)\r\n                .then(response => resolve(response))\r\n                .catch(error => {\r\n                    if (error.errors) {\r\n                        Notify.error(error.errors[0]);\r\n                    } else {\r\n                        Notify.error(error);\r\n                    }\r\n                    reject(error)\r\n                }\r\n                );\r\n        });\r\n    }\r\n}\r\n\r\nfunction isRequireToken(url){\r\n    const match = PUBLIC_URLS.filter(u=> url.endsWith(u));\r\n    return  match.length === 0;\r\n}","//TODO take from from env\r\n// export const endpoint = 'http://localhost:4000/saas/';\r\n export const endpoint = 'https://devapi.stylrax.com/';\r\n\r\n\r\nexport const methods = {\r\n    GET: \"GET\",\r\n    POST: \"POST\",\r\n    PUT: \"PUT\",\r\n    DELETE: \"DELETE\"\r\n}\r\n\r\n","import React from \"react\";\r\n\r\nexport default function Loader() {\r\n  return (\r\n    <div class=\"spinner-border text-dark\" role=\"status\">\r\n      <span class=\"visually-hidden\">Loading...</span>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { Row, Col, Container } from \"react-bootstrap\";\r\nimport Dlogo from \"../assets/image/DLogo.png\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { storeToken } from \"../features/authInfo\";\r\nimport { doLogin } from \"../api/account.api\";\r\nimport Notify from \"../utils/notify\";\r\nimport Loader from \"./Loader\";\r\n\r\nfunction Login() {\r\n  const [apiloading, setApiLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n\r\n  const initialValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    email: Yup.string().email().required(\"Please enter your email\"),\r\n    password: Yup.string(),\r\n  });\r\n\r\n  const [rememberMe, setRememberMe] = React.useState(false);\r\n\r\n  const {\r\n    values,\r\n    errors,\r\n    touched,\r\n    handleChange,\r\n    handleSubmit,\r\n    isValid,\r\n    dirty,\r\n  } = useFormik({\r\n    initialValues: initialValues,\r\n    validationSchema: validationSchema,\r\n    onSubmit: async (values, { resetForm }) => {\r\n      // console.log(\"Values :: \", values);\r\n      try {\r\n        await validationSchema.validate(values);\r\n        setApiLoading(true);\r\n        // console.log(\"Validation passed\");\r\n        const { email, password } = values;\r\n        // console.log(\"User Details ::>\", email, \"&\", password);\r\n        const res = await doLogin({ email, password });\r\n        setApiLoading(false);\r\n        // console.log(\"resp\", res);\r\n        const { authToken: token, userInfo } = res.data.data;\r\n        dispatch(storeToken({ token, userInfo }));\r\n        resetForm();\r\n        setRememberMe(false);\r\n        navigate(\"/dashboard\");\r\n      } catch (error) {\r\n        setApiLoading(false);\r\n        Notify.error(error.message);\r\n      }\r\n    },\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Container className=\"p-0\">\r\n        <Row className=\"m-0 p-0\">\r\n          <Col sm={8} className=\"p-0 mt-4 \">\r\n            <p className=\"\">\r\n              Welcome to{\" \"}\r\n              <span>\r\n                <img src={Dlogo} alt=\"dlogo.png\" />\r\n              </span>\r\n            </p>\r\n          </Col>\r\n          <Col\r\n            sm={4}\r\n            className=\"p-0 d-flex justify-content-center align-items-center mt-4\"\r\n          >\r\n            <h6 className=\"sign-account\">\r\n              No Account? <br />\r\n              <span className=\"sign-up\">Sign up</span>\r\n            </h6>\r\n          </Col>\r\n          <Col className=\"p-0 mt-3 \">\r\n            <h1 className=\"\">Sign in</h1>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n      <div className=\"main-form d-flex justify-content-center align-items-center\">\r\n        <form className=\"form mt-3 mb-2 w-100\" onSubmit={handleSubmit}>\r\n          <label className=\"text mb-3\">\r\n            Enter your username or email address\r\n          </label>\r\n          <input\r\n            className=\"email-input\"\r\n            placeholder=\"username or email address\"\r\n            name=\"email\"\r\n            id=\"email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n          />\r\n          {touched.email && errors.email && (\r\n            <span className=\"error text-danger small\">{errors.email}</span>\r\n          )}\r\n          <br />\r\n          <label className=\"text mt-3\">Enter your Password</label>\r\n          <br />\r\n          <input\r\n            className=\"password-input\"\r\n            name=\"password\"\r\n            id=\"password\"\r\n            placeholder=\"Password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n          />\r\n          {touched.password && errors.password && (\r\n            <span className=\"error text-danger small\">{errors.password}</span>\r\n          )}\r\n          <div className=\"checkbox-main d-flex justify-content-between mt-3 mb-3\">\r\n            <div className=\"checkbox\">\r\n              <input\r\n                className=\"checkbox\"\r\n                type=\"checkbox\"\r\n                id=\"rememberMe\"\r\n                checked={rememberMe}\r\n                onChange={() => setRememberMe(!rememberMe)}\r\n              />\r\n              <label className=\"px-1\">Remember me?</label>\r\n            </div>\r\n            <div className=\"forget-link\">\r\n              <Link to={\"/admin/forget-password\"} className=\"para mt-4\">\r\n                Forgot Password\r\n              </Link>\r\n            </div>\r\n          </div>\r\n          <div className=\"d-flex justify-content-end\">\r\n            <button\r\n              className={`button ${\r\n                !(isValid && dirty && rememberMe) ? \"disable\" : \"\"\r\n              }`}\r\n              type=\"submit\"\r\n              disabled={!isValid || !dirty || !rememberMe}\r\n            >\r\n              {apiloading ? <Loader /> : \"Sign in\"}\r\n            </button>\r\n          </div>\r\n          {(!isValid || !dirty || !rememberMe) && (\r\n            <div className=\"error text-danger small mt-2 text-center\">\r\n              Please fill in all fields and check the Remember me box.\r\n            </div>\r\n          )}\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import HTTP from \"../service/http\";\r\nimport { methods } from \"../constants\";\r\nimport {\r\n  __endpoint_doLogin\r\n} from \"../constants/endpoints\";\r\n\r\nexport const doLogin = (payload) =>\r\n  HTTP.Request(methods.POST, __endpoint_doLogin, payload);\r\n","import { endpoint } from '../constants';\r\n\r\n/* user Login */\r\nexport const __endpoint_doLogin = endpoint + \"admin/login\";\r\n\r\n"],"names":["PUBLIC_URLS","notify","message","type","toast","Notifier","success","info","warn","error","axios","interceptors","request","use","config","url","headers","filter","u","endsWith","length","concat","session","get","Promise","reject","response","data","HTTP","Request","method","arguments","undefined","resolve","toUpperCase","then","catch","errors","Notify","methods","Loader","_jsx","class","role","children","apiloading","setApiLoading","useState","navigate","useNavigate","dispatch","useDispatch","validationSchema","Yup","shape","email","required","password","rememberMe","setRememberMe","React","values","touched","handleChange","handleSubmit","isValid","dirty","useFormik","initialValues","onSubmit","async","_ref","resetForm","validate","res","payload","endpoint","authToken","token","userInfo","storeToken","_jsxs","_Fragment","Container","className","Row","Col","sm","src","Dlogo","alt","placeholder","name","id","value","onChange","checked","Link","to","disabled"],"sourceRoot":""}